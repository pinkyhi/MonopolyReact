// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Monopoly.DAL;

namespace Monopoly.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20201013120548_GameLogic")]
    partial class GameLogic
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId1");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("GameStatus")
                        .HasColumnType("int");

                    b.Property<int>("SettingsId")
                        .HasColumnType("int");

                    b.Property<int>("TurnOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("TurnOwnerId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("SettingsId")
                        .IsUnique();

                    b.HasIndex("TurnOwnerId1");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.GameEntities.Cards.CardGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CardGroup");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.GameEntities.Cards.EventCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Choice")
                        .HasColumnType("bit");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventCard");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.GameEntities.EventField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Choice")
                        .HasColumnType("bit");

                    b.Property<string>("DefaultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EventField");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.GameEntities.Groups.MovementMonopoly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseTax")
                        .HasColumnType("int");

                    b.Property<double>("IterationDivider")
                        .HasColumnType("float");

                    b.Property<double>("MonopolyMultiplier")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MovementMonopoly");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.GameEntities.Groups.MultiplyMonopoly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BaseMultiplier")
                        .HasColumnType("float");

                    b.Property<double>("IterationDivider")
                        .HasColumnType("float");

                    b.Property<double>("MonopolyMultipier")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MultiplyMonopoly");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.GameEntities.Groups.StreetMonopoly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StreetMonopoly");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.GameEntities.MovementField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovementMonopolyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovementMonopolyId");

                    b.ToTable("MovementField");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.GameEntities.MultiplyField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MultiplyMonopolyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MultiplyMonopolyId");

                    b.ToTable("MultiplyField");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.GameEntities.StreetField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FourHousesTax")
                        .HasColumnType("int");

                    b.Property<int>("HotelTax")
                        .HasColumnType("int");

                    b.Property<int>("OneHouseTax")
                        .HasColumnType("int");

                    b.Property<int>("StreetMonopolyId")
                        .HasColumnType("int");

                    b.Property<int>("ThreeHousesTax")
                        .HasColumnType("int");

                    b.Property<int>("TwoHouseeTax")
                        .HasColumnType("int");

                    b.Property<int>("UnbuildedTax")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StreetMonopolyId");

                    b.ToTable("StreetField");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.GameSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AnytimeBuilding")
                        .HasColumnType("bit");

                    b.Property<bool>("AnytimeExchange")
                        .HasColumnType("bit");

                    b.Property<bool>("Auction")
                        .HasColumnType("bit");

                    b.Property<bool>("BuildingBalancing")
                        .HasColumnType("bit");

                    b.Property<int>("CasinoType")
                        .HasColumnType("int");

                    b.Property<bool>("DoubleBreaksJail")
                        .HasColumnType("bit");

                    b.Property<bool>("DoublePayOnUnbuildedMonopoly")
                        .HasColumnType("bit");

                    b.Property<bool>("DoubleRepeatsTurn")
                        .HasColumnType("bit");

                    b.Property<int?>("DoublesCountsForArrest")
                        .HasColumnType("int");

                    b.Property<bool>("FullCollateralValue")
                        .HasColumnType("bit");

                    b.Property<int>("HotelsCount")
                        .HasColumnType("int");

                    b.Property<int>("HousesCount")
                        .HasColumnType("int");

                    b.Property<int>("ImprisonmentDuration")
                        .HasColumnType("int");

                    b.Property<int>("ImprisonmentTurnsCount")
                        .HasColumnType("int");

                    b.Property<int>("JailbreakPrice")
                        .HasColumnType("int");

                    b.Property<bool>("MovementFields")
                        .HasColumnType("bit");

                    b.Property<int>("RightStartHitAward")
                        .HasColumnType("int");

                    b.Property<int>("StartMoney")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GameSettings");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.CityCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Arguments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CardGroupId")
                        .HasColumnType("int");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardGroupId");

                    b.HasIndex("CardId");

                    b.HasIndex("CityId", "CardId")
                        .IsUnique();

                    b.ToTable("CityCard");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.CityEventField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("DefaultArguments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventFieldId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventFieldId");

                    b.HasIndex("CityId", "EventFieldId")
                        .IsUnique();

                    b.ToTable("CityEventField");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.CityMovementField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("MovementFieldId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MovementFieldId");

                    b.HasIndex("CityId", "MovementFieldId")
                        .IsUnique();

                    b.ToTable("CityMovementField");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.CityMultiplyField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("MultiplyFieldId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MultiplyFieldId");

                    b.HasIndex("CityId", "MultiplyFieldId")
                        .IsUnique();

                    b.ToTable("CityMultiplyField");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.CityStreet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("StreetId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StreetId");

                    b.HasIndex("CityId", "StreetId")
                        .IsUnique();

                    b.ToTable("CityStreet");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.GameCard", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("DeckPosition")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("CardId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("GameCard");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.GameEventField", b =>
                {
                    b.Property<int>("EventFieldId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Arguments")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("EventFieldId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("GameEventField");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.GameMovementField", b =>
                {
                    b.Property<int>("MovementFieldId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("MovementFieldId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("GameMovementField");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.GameMultiplyField", b =>
                {
                    b.Property<int>("MultiplyFieldId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("MultiplyFieldId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("GameMultiplyField");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.GameStreet", b =>
                {
                    b.Property<int>("StreetId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("StreetId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("GameStreet");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.Membership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Money")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PlayerStatus")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("TurnArgument")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("GameId", "UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.City", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId1");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.Game", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.GameSettings", "GameSettings")
                        .WithOne("Game")
                        .HasForeignKey("Monopoly.DAL.Entities.Game", "SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.User", "TurnOwner")
                        .WithMany()
                        .HasForeignKey("TurnOwnerId1");
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.GameEntities.MovementField", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.GameEntities.Groups.MovementMonopoly", "MovementMonopoly")
                        .WithMany()
                        .HasForeignKey("MovementMonopolyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.GameEntities.MultiplyField", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.GameEntities.Groups.MultiplyMonopoly", "MultiplyMonopoly")
                        .WithMany()
                        .HasForeignKey("MultiplyMonopolyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.GameEntities.StreetField", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.GameEntities.Groups.StreetMonopoly", "StreetMonopoly")
                        .WithMany()
                        .HasForeignKey("StreetMonopolyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.CityCard", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.GameEntities.Cards.CardGroup", "CardGroup")
                        .WithMany()
                        .HasForeignKey("CardGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.GameEntities.Cards.EventCard", "EventCard")
                        .WithMany("CityCards")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.City", "City")
                        .WithMany("CityCards")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.CityEventField", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.City", "City")
                        .WithMany("CityEventFields")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.GameEntities.EventField", "EventField")
                        .WithMany("CityEventFields")
                        .HasForeignKey("EventFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.CityMovementField", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.City", "City")
                        .WithMany("CityMovementFields")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.GameEntities.MovementField", "MovementField")
                        .WithMany("CityMovementFields")
                        .HasForeignKey("MovementFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.CityMultiplyField", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.City", "City")
                        .WithMany("CityMultiplyFields")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.GameEntities.MultiplyField", "MultiplyField")
                        .WithMany("CityMultiplyFields")
                        .HasForeignKey("MultiplyFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.CityStreet", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.City", "City")
                        .WithMany("CityStreets")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.GameEntities.StreetField", "Street")
                        .WithMany("CityStreets")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.GameCard", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.JoinEntities.CityCard", "Card")
                        .WithMany("GameCards")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.Game", "Game")
                        .WithMany("Cards")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.JoinEntities.Membership", "Owner")
                        .WithMany("Cards")
                        .HasForeignKey("GameId")
                        .IsRequired();
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.GameEventField", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.JoinEntities.CityEventField", "EventField")
                        .WithMany("GameEventFields")
                        .HasForeignKey("EventFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.Game", "Game")
                        .WithMany("EventFields")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.JoinEntities.Membership", "Owner")
                        .WithMany("EventFields")
                        .HasForeignKey("GameId")
                        .IsRequired();
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.GameMovementField", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.Game", "Game")
                        .WithMany("MovementFields")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.JoinEntities.Membership", "Owner")
                        .WithMany("MovementFields")
                        .HasForeignKey("GameId")
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.JoinEntities.CityMovementField", "MovementField")
                        .WithMany("GameMovementFields")
                        .HasForeignKey("MovementFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.GameMultiplyField", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.Game", "Game")
                        .WithMany("MultiplyFields")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.JoinEntities.Membership", "Owner")
                        .WithMany("MultiplyFields")
                        .HasForeignKey("GameId")
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.JoinEntities.CityMultiplyField", "MultiplyField")
                        .WithMany("GameMultiplyFields")
                        .HasForeignKey("MultiplyFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.GameStreet", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.Game", "Game")
                        .WithMany("Streets")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.JoinEntities.Membership", "Owner")
                        .WithMany("Streets")
                        .HasForeignKey("GameId")
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.JoinEntities.CityStreet", "Street")
                        .WithMany("GameStreets")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Monopoly.DAL.Entities.JoinEntities.Membership", b =>
                {
                    b.HasOne("Monopoly.DAL.Entities.Game", "Game")
                        .WithMany("Membership")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monopoly.DAL.Entities.User", "User")
                        .WithMany("Membership")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
